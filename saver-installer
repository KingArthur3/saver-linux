#!/bin/bash

# Copyright (C) 2020 Artur Boguslawski, e-mail: artur.boguslawski@ibnet.pl

# saver comes with NO WARRANTY. This program is completely free and you can
# redistribute it under the GNU General Public License conditions.
# See https://www.gnu.org/licenses/gpl-3.0.txt for more information

# saver was made to simplify the process of backuping using rsync.

# version 1.11

if [ ! `whoami` = root ]; then # making sure the progream is executed as root
    exec sudo $0 $1 $2 $3 $4 $5
fi

if [ ! -e /usr/bin/saver ]; then # installing the program if run for the first time
    chmod u=rwx,g=rwx,o=rwx $0
    echo "Configuring the access permissions"
    mv $0 /usr/bin/saver
    echo "Installing the program"
    exit
fi

if ! [ $(command -v rsync) ]; then # checking if user has rsync installed
    echo "In order for this program to work, rsync must be installed"
    apt install rsync
    exit
fi

for i in {1..5}; do # here input variables of the script are read one by another using the for loop
    case ${!i} in
        \-*) # this is where all the '-' options are
            if [[ "${!i}" == *s* ]]; then
                option=$option"sync" # the option is added to the variable and not set to it to make sure that it'll be impossible to choose two options at once
            fi

            if [[ "${!i}" == *h* ]]; then
                option=$option"help"
            fi

            if [[ "${!i}" == *d* ]]; then
                rsyncoptions=(${rsyncoptions}-n ) # the next 4 options add an option to the rsync command later on
            fi

            if [[ "${!i}" == *r* ]]; then
                rsyncoptions=(${rsyncoptions}--delete )
            fi

            if [[ "${!i}" == *p* ]]; then
                rsyncoptions=(${rsyncoptions}--progress )
            fi

            if [[ "${!i}" == *v* ]]; then
                rsyncoptions=(${rsyncoptions}-v )
            fi

            if [[ "${!i}" == *i* ]]; then
                option=$option"diskinfo"
            fi

            if [[ "${!i}" == *u* ]]; then
                option=$option"uninstall"
            fi
        ;;

        /*) # here the paths and disks are set
            if [[ -z $sp ]]; then
                sp="${!i}" # sp = sync path
            else
                tp="${!i}" # tp = target path
            fi
        ;;

        *)
            if [[ -b /dev/${!i} ]]; then
                if [[ -z $sp ]]; then
                    sdp="/dev/${!i}" # sdp = sync disk path
                else
                    tdp="/dev/${!i}" # tdp = target disk path
                fi
            fi
        ;;
    esac
done

case $option in
    sync) # the -s option
        if [[ ! -e $sp ]]; then # checking if the path to sync from exists
            echo -e "The path to sync wasn't provided or doesn't exist\nType in 'saver -h' to see the list of commands"
            logger "saver: The path to sync wasn't provided or doesn't exist"
            exit
        fi

        if [[ -z $tp ]]; then # checking if the target path isn't empty
            echo -e "The target path wasn't provided\nType in 'saver -h' to see the list of commands"
            logger "saver: The target path wasn't provided"
            exit
        fi

        fsp=$sp # these stand for the final paths that will be put to the rsync command (final sync path / final target path)
        ftp=$tp

        if [[ $sdp ]]; then
            umount -q $sdp # mounting the sync external disk to a folder that's made
            echo "Unmounting the disk to sync from"

            mkdir /mnt/saverbd | grep -q a
            echo "Creating /mnt/saverbd"

            mount $sdp /mnt/saverbd 
            echo -e "Mounting the disk to sync to /mnt/saverbd\n"

            fsp=/mnt/saverbd${sp} # updates the final path if it's from an external disk
        fi

        if [[ $tdp ]]; then
            umount -q $tdp # mounting the target external disk to a folder that's made
            echo "Unmounting the target disk"

            mkdir /mnt/savertd | grep -q a
            echo "Creating /mnt/savertd"

            mount $tdp /mnt/savertd
            echo -e "Mounting the target disk to /mnt/savertd\n"

            ftp=/mnt/savertd${tp} # updates the final path if it's from an external disk
        fi

        if [[ ! -e $tp ]]; then
            mkdir -p $ftp
            echo "Creating ${ftp}"
        fi

        echo

        rsync -aAX "${rsyncoptions[@]}" $fsp --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} $ftp

        if [[ $sdp ]]; then # unmounting the sync external disk and deleting the mount folder
            umount -q $sdp
            echo -e "\nUnmounting the synced disk"

            rm -rf /mnt/saverbd
            echo -e "Deleting /mnt/saverbd\n"
        fi

        if [[ $tdp ]]; then # unmounting the target external disk and deleting the mount folder
            umount -q $tdp
            echo -e "\nUnmounting the target disk"

            rm -rf /mnt/savertd 
            echo -e "Deleting /mnt/savertd\n"
        fi
    ;;

    diskinfo)
        lsblk -no NAME,SIZE,MOUNTPOINT # shows the available disks and partitions
    ;;

    help) # the help page
        echo -e "\n Copyright (C) 2020 Artur Boguslawski, e-mail: artur.boguslawski@ibnet.pl"

        echo -e "\n Version 1.11"

        echo -e "\n saver comes with NO WARRANTY. This program is completely free and you can\n redistribute it under the GNU General Public License conditions.\n See https://www.gnu.org/licenses/gpl-3.0.txt for more information"

        echo -e "\n saver was made to simplify the process of backuping using rsync."

        echo -e "\n This program will automaticly exclude these directories from syncing:\n /dev ; /proc ; /sys ; /tmp ; /run ; /mnt ; /media ; /lost+found."
        echo -e " When typing in the disk, you should ONLY provide the name of the disk\n WITHOUT '/dev/' at the beginning. The program will add it automatically."
        echo -e " Any external disk you mention will be unmounted at the end of the program."

        echo -e "\n Options:"

        echo -e "\n -s     Sync two folders, meaning coping the contents of one folder to\n        the other one. Usage: -s [copied disk, empty for current disk]\n        [copied path] [target disk, empty for current disk] [target path]" 
        echo -e " -r     Remove files from the target directory that are not present in \n        the copied path"
        echo -e " -d     Preform a 'dry run', which means that no changes will be made, but\n        you will be able to see the output of the command, as if it \n        was run normally. "
        echo -e " -p     Display progress for individual files (useful for large files)"
        echo -e " -v     Display files that are being processed"
        echo -e " -i     Show available disks/partitions"
        echo -e " -u     Uninstall this program"
        echo -e " -h     Show this help\n"
    ;;

    uninstall) # uninstall section
        echo -n "Are you sure you want to uninstall this program? (y/n): "
        read -n 1 uq
        echo

        if [[ $uq == y ]]; then
            rm -rf /usr/bin/saver
            echo "Uninstalling the program..."
            exit
        else
            exit
        fi 
    ;;

    *) # in case no valid option is provided
        echo -e "Invalid option provided\nType in 'saver -h' to see the list of commands"
        logger "saver: Invalid option provided" 
    ;;
esac